---
- block:
    - name: set configuration to enable LDAPI
      set_fact:
        ds389_ldapi_config:
          nsslapd-ldapilisten: "on"
          #is defined %}{{ ds389_rundir }}{% else %}/var/run{% endif %}/slapd-{{ ds389_init_slapd.instance_name }}.socket"
          nsslapd-ldapifilepath: "{{ ds389_init_slapd.run_dir }}/slapd-{{ ds389_init_slapd.instance_name }}.socket"
          nsslapd-ldapiautobind: "on"
          nsslapd-ldapimaptoentries: "off"
          nsslapd-minssf: "{{ ds389_init_slapd.minssf | default('0') | int }}"
      when:
        - ds389_ldapi_enabled | bool

    - name: set configuration to disable LDAPI
      set_fact:
        ds389_ldapi_config:
          nsslapd-ldapilisten: "off"
          nsslapd-ldapiautobind: "off"
      when:
        - not ds389_ldapi_enabled

    - name: d
      debug:
        msg:
          - "ds389_ldapi_config   : {{ ds389_ldapi_config }}"

    - name: configure LDAPI
      ldap_attrs:
        server_uri: "{{ ds389_server_uri }}"
        validate_certs: "{{ ds389_tls.validate_certs | bool }}"
        start_tls: "{{ ds389_starttls_early }}"
        bind_dn: "{{ ds389_init_slapd.root_dn }}"
        bind_pw: "{{ ds389_init_slapd.root_password }}"
        dn: "cn=config"
        attributes: "{{ ds389_ldapi_config }}"
        state: exact
      register: ds389_restart_condition_auth_1

  rescue:
    - name: configure LDAPI over LDAPI
      ldap_attrs:
        server_uri: "ldapi://{{ ds389_init_slapd.run_dir }}/slapd-{{ ds389_init_slapd.instance_name }}.socket"
        bind_dn: "{{ ds389_init_slapd.root_dn }}"
        bind_pw: "{{ ds389_init_slapd.root_password }}"
        dn: "cn=config"
        attributes: "{{ ds389_ldapi_config }}"
        state: exact
      register: ds389_restart_condition_auth_2


- name: d
  debug:
    msg:
      - "ds389_restart_condition_auth_1   : {{ ds389_restart_condition_auth_1 | default({}) }}"
      - "ds389_restart_condition_auth_2   : {{ ds389_restart_condition_auth_2 | default({}) }}"

# Documentation: https://directory.fedoraproject.org/docs/389ds/design/sasl-mechanism-configuration.html
# TODO: "none" means "everything is allowed"...
# how to allow none (or just EXTERNAL that is always enabled but not always allowed or whatever?)
- block:
    - name: d
      debug:
        msg:
          - "ds389_server_uri               : {{ ds389_server_uri }}"
          - "ds389_tls.validate_certs       : {{ ds389_tls.validate_certs | bool }}"
          - "ds389_init_slapd.root_dn       : {{ ds389_init_slapd.root_dn  }}"
          - "ds389_init_slapd.root_password : {{ ds389_init_slapd.root_password  }}"
          - "ds389_sasl_plain_enabled       : {{ 'PLAIN' if ds389_sasl_plain_enabled else [] }}"

    - name: configure SASL
      ldap_attrs:
        server_uri: "{{ ds389_server_uri }}"
        validate_certs: "{{ ds389_tls.validate_certs | bool }}"
        start_tls: "{{ ds389_starttls_early }}"
        bind_dn: "{{ ds389_init_slapd.root_dn }}"
        bind_pw: "{{ ds389_init_slapd.root_password }}"
        dn: "cn=config"
        attributes:
          nsslapd-allowed-sasl-mechanisms: "{{ 'PLAIN' if ds389_sasl_plain_enabled else [] }}"
        state: exact
      register: ds389_sasl_result

    - name: d
      debug:
        msg:
          - "{{ ds389_sasl_result }}"

  rescue:
    # Deleting an attribute fails if the the attribute doesn't exist,
    # yay for idempotence...
    - name: assert that task failed successfully
      assert:
        that:
          - not ds389_sasl_result.changed
          - "'desc' in ds389_sasl_result.details"
          - ds389_sasl_result.details.desc == 'No such attribute'

- block:
    # With 389DS version 1.4.X the option to delete this attribute to reset it to the default value
    # has been removed.
    # Instead, we have to set it to "DEFAULT" (case sensitive).
    - name: Normalize password storage scheme
      # no_log: true  # Could be logged but ansible-lint complains as it detects the word "password"
      set_fact:
        ds389_normalized_password_storage_scheme: >-
          {% if ds389_password_storage_scheme == [] %}DEFAULT{%
          else
          %}{{ ds389_password_storage_scheme }}{% endif %}

    - name: d
      debug:
        msg:
          - "ds389_normalized_password_storage_scheme   : {{ ds389_normalized_password_storage_scheme }}"

    # if we use DEFAULT as password value to reset the field in 389DS 1.4.X we fail idempotence tests
    # since "DEFAULT" is different from whatever scheme is currently used
    # as DEFAULT itself get instantly converted in the name of an actual password storage scheme.
    # Therefore, to determine if the task actually changed, we compare the value before and after
    # instead of relying on the attribute change task to report its status
    - name: Configure password storage scheme
      ldap_attrs:
        server_uri: "{{ ds389_server_uri }}"
        validate_certs: "{{ ds389_tls.validate_certs }}"
        start_tls: "{{ ds389_starttls_early }}"
        bind_dn: "{{ ds389_init_slapd.root_dn }}"
        bind_pw: "{{ ds389_init_slapd.root_password }}"
        dn: "cn=config"
        attributes:
          passwordStorageScheme: "{{ ds389_normalized_password_storage_scheme }}"
        state: exact
      register: ds389_pwdstorage_result
      when:
        - ds389_normalized_password_storage_scheme != "DEFAULT"

    # This is not perfect: for example if we are using the playbook to reset the storage scheme to
    # the default value after
    # having previously altered it to a different value, however there is no way known to us in
    # vanilla ansible to query an
    # LDAP attribute value and therefore we can't make a comparison to check wether the value actually
    # changed or not.
    - name: Reset password storage scheme (389DS 1.4.X)
      ldap_attrs:
        server_uri: "{{ ds389_server_uri }}"
        validate_certs: "{{ ds389_tls.validate_certs }}"
        start_tls: "{{ ds389_starttls_early }}"
        bind_dn: "{{ ds389_init_slapd.root_dn }}"
        bind_pw: "{{ ds389_init_slapd.root_password }}"
        dn: "cn=config"
        attributes:
          passwordStorageScheme: "{{ ds389_normalized_password_storage_scheme }}"
        state: exact
      register: ds389_pwdstorage_result
      when:
        - ds389_normalized_password_storage_scheme == "DEFAULT"
      changed_when: false

  rescue:
    # Same as above
    - name: Assert that task failed successfully
      assert:
        that:
          - not ds389_pwdstorage_result.changed
          - "'desc' in ds389_pwdstorage_result.details"
          - "{{ ds389_pwdstorage_result.details }}.desc == 'No such attribute'"

...
